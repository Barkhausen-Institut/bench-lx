clone:
    takes about 37000 cycles.
    18000 cycles is the clone itself.
    then it takes another 1000 cycles to get to waitpid
    until we arrive at the entry-point, it takes another 13000 cycles

read:
    each 4K read costs about 12000 cycles. 3000 cycles are Linux overhead, 9000 cycles
    are for the data-copy.
    12000 * (2M / 4K) = 12000 * 512 = 6144000

copy:
    the mmap'ed input file causes 32 pagefaults, because Linux maps 16 pages at once
    the mmap'ed output file causes 512 pagefaults, 1 page at once
    I would guess that Linux maps just 1 page at once when writing, because it costs time to
    allocate a page, etc., and thus, it doesn't want to allocate more than necessary.
    For reading, this is of course cheaper, so that it makes sense to map a few at once.
    In total, about 8M cycles are spent for pagefaults, so that we have about 15000 cycles per
    pagefault. Although I would assume that the write-pagefaults are more expensive.
    For M3, it is different because at first, we can "map" the whole file in constant time. Thus,
    there is no point in mapping it in pieces, but we always map at much as possible.
    For writing, it's not that expensive to allocate space, so that we can easily allocate a few
    blocks at once and free them on close again, if we didn't need them.


Linux read:

    enter       : 198   = 15+14+7+90+50+22
    fd to file  : 75    = 5+6+4+9+34+17
    checks      : 99    = 15+33+6+9+22+14
    iov init    : 75    = 31+4+14+19+7
    get page    : 342   = 57+4+14+17+8+7+6+14+5+4+14+8+5+14
                          +71+6+39+14+3+15+14+3
    checks      : 75
    mark acc.   : 17
    iov         : 66    = 10+56
    memcpy      : 4758
    iov         : 55
    go to next  : 77    = 37+40
    put page    : 22
    set atime   : 171   = 34+4+4+28+44+17+22+14+4
    return      : 78    = 6+14+3+12+40+3
    fsnotify    : 88    = 27+13+11+37
    to syscall  : 91    = 3+14+3+16+9+3+17+22+4
    leave       : 190   = 38+114+38

    ---

    syscall     : 382
    fd+page     : 876
    iov         : 196
    memcpy      : 4758

    fsnotify    : 88
    set atime   : 171


M3 read:

    enter       : 39    = 11+8+20
    get location: 87    = 26+14+12+35
    read        : 589
    leave       : 28    = 6+5+14+3

    ---

    func call   : 67
    get location: 87
    read        : 589
