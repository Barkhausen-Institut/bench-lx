#!/bin/bash

run_gem5() {
    cmd=$1
    wait=$2

    if [ "$cmd" = "warmup" ]; then
        GEM5_OUT="gem5-$LX_CORES"
    else
        if [ ! -d "$GEM5_OUT" ]; then
            echo "Please specify the gem5 output directory via GEM5_OUT!" >&2
            exit 1
        fi

        rm -f $GEM5_OUT/cpt.*
        ln -sf `readlink -f gem5-$LX_CORES/cpt.*` $GEM5_OUT
    fi
    export M5_PATH=$GEM5_OUT

    if [ "$LX_ARCH" = "riscv64" ]; then
        GEM5_ARCH=RISCV
    else
        GEM5_ARCH=X86
    fi

    # mkdir -p $GEM5_OUT/binaries
    # ln -sf `readlink -f $LX_BUILDDIR/vmlinux` $GEM5_OUT/binaries/x86_64-vmlinux-2.6.22.9
    # ln -sf `readlink -f $LX_BUILDDIR/disks` $GEM5_OUT

    GEM5_CPU=${GEM5_CPU:-DerivO3CPU}
    GEM5_CPUFREQ=${GEM5_CPUFREQ:-1GHz}
    GEM5_MEMFREQ=${GEM5_MEMFREQ:-333MHz}

    params=`mktemp`
    echo -n "--outdir=$GEM5_OUT --debug-file=gem5.log" >> $params
    # echo -n " --debug-start=22369202756649" >> $params
    # only use the listener-mode argument, if we're using M3's gem5 version
    if [[ $GEM5_DIR = *"/m3/"* ]]; then
        echo -n " --listener-mode=on" >> $params
    fi
    if [ "$GEM5_FLAGS" != "" ]; then
        echo -n " --debug-flags=$GEM5_FLAGS" >> $params
    fi
    echo -n " $GEM5_DIR/configs/example/riscv/fs_linux.py --cpu-type $GEM5_CPU" >> $params
    echo -n " --cpu-clock=$GEM5_CPUFREQ --sys-clock=$GEM5_MEMFREQ" >> $params
    echo -n " --caches --l2cache" >> $params
    echo -n " -n $LX_CORES" >> $params
    echo -n " --kernel $LX_BUILDDIR/riscv-pk/bbl" >> $params
    # echo -n " --command-line=\"ttyS0 console=ttyS0 lpj=7999923 root=/dev/sda1\" " >> $params

    if [ "$GEM5_CP" != "" ]; then
        echo -n " --restore-with-cpu $GEM5_CPU --checkpoint-restore=$GEM5_CP" >> $params
    fi
    if [ "$cmd" = "warmup" ]; then
        echo -n " --checkpoint-at-end" >> $params
    fi

    if [ "$cmd" = "run" ]; then
        xargs -a $params $GEM5_DIR/build/$GEM5_ARCH/gem5.opt | tee $GEM5_OUT/log.txt
    else
        echo -n > $GEM5_OUT/logerr.txt

        # start gem5 in background
        xargs -a $params $GEM5_DIR/build/$GEM5_ARCH/gem5.opt 2>$GEM5_OUT/logerr.txt > $GEM5_OUT/log.txt &

        # wait until the port is open
        while [ "`grep 'com_1 connection on port' $GEM5_OUT/logerr.txt`" = "" ]; do
            echo "Waiting for GEM5 to start..." 1>&2
            sleep 1
        done
        port=`grep 'com_1 connection on port' $GEM5_OUT/logerr.txt | awk '{ print $7 }'`

        gem5pid=`pgrep -P $!`

        echo -n > $GEM5_OUT/res.tmp

        # now send the command via telnet to gem5
        echo "Connecting to serial line on port $port" 1>&2
        (
            echo -n $BASHPID > $GEM5_OUT/pid.txt
            if [ "$cmd" = "warmup" ]; then
                # login via bruteforce
                while true; do
                    echo "root"
                    sleep 1
                done
            elif [ "$cmd" = "fsbench" ]; then
                echo -e "\n/mount.sh\n"
                # better wait a bit
                # Linux is quite fragile as it seems, if serial input comes too quickly
                sleep 10
                echo -e "/bench/fsbench.sh '$BENCH_CMD'"
            elif [ "$cmd" = "bench" ]; then
                echo -e "\n/mount.sh\n"
                sleep 10
                echo -e "/bench/bench.sh '$BENCH_CMD'"
            elif [ "$cmd" = "servertrace" ]; then
                echo -e "\n/mount.sh"
                sleep 10
                echo -e "/bench/servertrace.sh $BENCH_CMD"
            elif [ "$cmd" = "serverbench" ]; then
                echo -e "\n/mount.sh"
                sleep 10
                echo -e "/bench/serverbench.sh $BENCH_CMD"
            else
                echo -e "\n/mount.sh\n/bench/microbench.sh"
            fi
            # sleep "for ever"
            sleep 100000
        ) | telnet 127.0.0.1 $port > $GEM5_OUT/res.tmp &

        # wait until we see the "benchmarks done" in the log file
        while [ "`grep $wait $GEM5_OUT/res.tmp`" == "" ]; do
            sleep 1
        done

        if [ "$cmd" = "warmup" ]; then
            sleep 10
        fi

        kill -INT $gem5pid
        pkill -INT -P `cat $GEM5_OUT/pid.txt`

        if [ "$cmd" = "warmup" ]; then
            # wait until the checkpoint is written
            path=$GEM5_OUT/cpt.*/m5.cpt
            while [ "`grep 'isa=x86' $path`" = "" ]; do
                echo "Waiting for checkpoint..." 1>&2
                sleep 1
                path=$GEM5_OUT/cpt.*/m5.cpt
            done
        else
            grep -v '^# ' $GEM5_OUT/res.tmp | \
                awk '/>===Starting_benchmarks===/ {p=1}; p; /<===Benchmarks_done===/ {p=0}' | \
                tail -n +2 | head -n -1 | dos2unix > $GEM5_OUT/res.txt
        fi

        rm $GEM5_OUT/res.tmp
    fi
}

case $1 in
    warmup)
        run_gem5 $1 '^#'
        ;;

    run)
        run_gem5 $1
        ;;

    dbg|trace)
        echo "Not supported"
        ;;

    bench|fsbench|microbench|serverbench|servertrace)
        run_gem5 $1 '^<===Benchmarks_done==='
        ;;
esac
